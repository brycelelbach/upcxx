// This file was GENERATED by command:
//     pump.py async_impl_templates1.h.pump
// DO NOT EDIT BY HAND!!!


    /*************************************/
    /* async_task constructors           */
    /*************************************/

    template<typename Function>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k)
    {
      generic_arg0<Function>
        args(k);
      init_async_task(caller, callee, ack,
                      async_wrapper0<Function>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1)
    {
      generic_arg1<Function, T1>
        args(k, a1);
      init_async_task(caller, callee, ack,
                      async_wrapper1<Function, T1>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2)
    {
      generic_arg2<Function, T1, T2>
        args(k, a1, a2);
      init_async_task(caller, callee, ack,
                      async_wrapper2<Function, T1, T2>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3)
    {
      generic_arg3<Function, T1, T2, T3>
        args(k, a1, a2, a3);
      init_async_task(caller, callee, ack,
                      async_wrapper3<Function, T1, T2, T3>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4)
    {
      generic_arg4<Function, T1, T2, T3, T4>
        args(k, a1, a2, a3, a4);
      init_async_task(caller, callee, ack,
                      async_wrapper4<Function, T1, T2, T3, T4>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5)
    {
      generic_arg5<Function, T1, T2, T3, T4, T5>
        args(k, a1, a2, a3, a4, a5);
      init_async_task(caller, callee, ack,
                      async_wrapper5<Function, T1, T2, T3, T4, T5>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6)
    {
      generic_arg6<Function, T1, T2, T3, T4, T5, T6>
        args(k, a1, a2, a3, a4, a5, a6);
      init_async_task(caller, callee, ack,
                      async_wrapper6<Function, T1, T2, T3, T4, T5, T6>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7)
    {
      generic_arg7<Function, T1, T2, T3, T4, T5, T6, T7>
        args(k, a1, a2, a3, a4, a5, a6, a7);
      init_async_task(caller, callee, ack,
                      async_wrapper7<Function, T1, T2, T3, T4, T5, T6, T7>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8)
    {
      generic_arg8<Function, T1, T2, T3, T4, T5, T6, T7, T8>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8);
      init_async_task(caller, callee, ack,
                      async_wrapper8<Function, T1, T2, T3, T4, T5, T6, T7, T8>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9)
    {
      generic_arg9<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      init_async_task(caller, callee, ack,
                      async_wrapper9<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10)
    {
      generic_arg10<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
      init_async_task(caller, callee, ack,
                      async_wrapper10<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10, typename T11>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10, const T11& a11)
    {
      generic_arg11<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      init_async_task(caller, callee, ack,
                      async_wrapper11<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10, T11>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10, typename T11, typename T12>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10, const T11& a11, const T12& a12)
    {
      generic_arg12<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
      init_async_task(caller, callee, ack,
                      async_wrapper12<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10, T11, T12>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10, typename T11, typename T12, typename T13>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10, const T11& a11, const T12& a12,
                          const T13& a13)
    {
      generic_arg13<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
          T12, T13>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
      init_async_task(caller, callee, ack,
                      async_wrapper13<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10, T11, T12, T13>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10, typename T11, typename T12, typename T13,
        typename T14>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10, const T11& a11, const T12& a12,
                          const T13& a13, const T14& a14)
    {
      generic_arg14<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
          T12, T13, T14>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
      init_async_task(caller, callee, ack,
                      async_wrapper14<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10, T11, T12, T13, T14>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10, typename T11, typename T12, typename T13,
        typename T14, typename T15>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10, const T11& a11, const T12& a12,
                          const T13& a13, const T14& a14, const T15& a15)
    {
      generic_arg15<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
          T12, T13, T14, T15>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14,
            a15);
      init_async_task(caller, callee, ack,
                      async_wrapper15<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10, T11, T12, T13, T14, T15>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

    template<typename Function, typename T1, typename T2, typename T3,
        typename T4, typename T5, typename T6, typename T7, typename T8,
        typename T9, typename T10, typename T11, typename T12, typename T13,
        typename T14, typename T15, typename T16>
    inline async_task(rank_t caller, rank_t callee, event *ack,
                      Function k, const T1& a1, const T2& a2, const T3& a3,
                          const T4& a4, const T5& a5, const T6& a6,
                          const T7& a7, const T8& a8, const T9& a9,
                          const T10& a10, const T11& a11, const T12& a12,
                          const T13& a13, const T14& a14, const T15& a15,
                          const T16& a16)
    {
      generic_arg16<Function, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
          T12, T13, T14, T15, T16>
        args(k, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14,
            a15, a16);
      init_async_task(caller, callee, ack,
                      async_wrapper16<Function, T1, T2, T3, T4, T5, T6, T7, T8,
                          T9, T10, T11, T12, T13, T14, T15, T16>,
                      (size_t)sizeof(args),
                      (void *)&args);
    }

